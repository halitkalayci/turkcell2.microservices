services:
  pg-1:
    image: postgres
    container_name: "pg-1"
    ports:
      - "5435:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=test
      - POSTGRES_DB=postgres
    volumes:
      - pg1_data:/var/lib/postgresql/data
  kafka:
    image: bitnami/kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,EXTERNAL://localhost:9094
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - BITNAMI_DEBUG=yes
      - KAFKA_CFG_NUM_PARTITIONS=2
  order-service:
    image: turkcell-order-service
    container_name: order-service
    restart: always
    depends_on:
      config-server:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SPRING_CLOUD_CONFIG_PROFILE: "dev"
      CONFIGURL: "http://config-server:8079"
  config-server:
    image: turkcell-config-server
    container_name: config-server
    ports:
      - "8079:8079"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8079/actuator/health"]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s
  papercut-smtp:
    image: jijiechen/papercut
    container_name: papercut-smtp
    ports:
      - "25:25"      # SMTP portu
      - "37408:37408" # Web arayüzü portu
    restart: always
  mongo:
    image: mongo
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alert.rules.yml:/etc/prometheus/alert.rules.yml
  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
  zipkin:
    image: openzipkin/zipkin
    ports:
      - 9411:9411
volumes:
  pg1_data:
  pg2_data:
  grafana_data:
  prometheus_data:


# MQ sistemleri hakkında ve kafka hakkında bir medium yazısı oluşturmak.

# Projedeki servicelerin bağımsız ER diagramlarını oluşturalım. (PAİR)